# -*- coding: utf-8 -*-
import numpy as np
from scipy.linalg import inv

def discrete_KF_update(x, u, z, A, B, C, P, Q, R):
    # Makes a discrete kalman update and returns the new state
    # estimation and covariance matrix. Can handle empy control
    # signals and empty B. Currently no warnings are issued if
    # used improperly, which should be fixed in future iterations.
    #
    # N<=M and 0<K<=M are integers.
    # 
    # ARGS:
    #    x - np.array of shape (M,1). State estimate at t = h*(k-1)
    #    u - np.array of shape (N,1), emty list or None. If applicable, control signals at t = h*(k-1)
    #    z - np.array of shape (K,1). Measurements at t = h*k.
    #    A - np.array of shape (M,M). System matrix.
    #    B - np.array of shape (M,N), emty list or None. Control signal matrix.
    #    C - np.array of shape (K,M). Measurement matrix.
    #    P - np.array of shape (M,M). Covariance at the previous update.
    #    Q - np.array of shape (M,M). Estimated covariance matrix of model noise.
    #    R - np.array of shape (K,K). Estimated covariance matrix of measurement noise.
    #
    # RETURN:
    #    xhat - New estimate at t = h*k
    #    Pnew - New covariance matrix at t = h*k

    # Kalman prediction
    if not B:
        xf = np.transpose(np.dot(A,x))
    else:
        xf = np.transpose(np.dot(A,x)) + np.transpose(np.dot(B,u))
    Pf = np.dot(np.dot(A,P),np.transpose(A)) + Q
    
    # Kalman update
    Knum =  np.dot(Pf,np.transpose(C))
    Kden = np.dot(C,np.dot(Pf,np.transpose(C))) + R
    K = np.dot(Knum,inv(Kden))
    xhat = xf + np.dot(K, (z - np.dot(C,xf)))
    Pnew = np.dot((np.eye(Q.shape[0]) - np.dot(K,C)), Pf)

    return xhat, Pnew

def discrete_AKF_update(x, u, z, zhist, A, B, C, P, Q, R, trajectory, t, Ts):
    # Makes an asynchronous kalman update and returns the new state
    # estimation and covariance matrix. Can handle emtpy control
    # signals and empty B. Currently no warnings are issued if
    # used improperly, which should be fixed in future iterations.
    # This function is very adapted to the problem at hand and should
    # not be used outside of the kinect node.
    #
    # N<=M and 0<K<=M are integers.
    # 
    # ARGS:
    #    x - np.array of shape (M,1). State estimate at t = h*(k-1)
    #    u - np.array of shape (N,1), emty list or None. If applicable, control signals at t = h*(k-1)
    #    z - np.array of shape (K,1). Measurements at t = h*k.
    #    zhist - np.array of shape (1,X). solution history of the measurements dating back X timesteps.
    #    A - np.array of shape (M,M). System matrix.
    #    B - np.array of shape (M,N), emty list or None. Control signal matrix.
    #    C - np.array of shape (K,M). Measurement matrix.
    #    P - np.array of shape (M,M). Covariance at the previous update.
    #    Q - np.array of shape (M,M). Estimated covariance matrix of model noise.
    #    R - np.array of shape (K,K). Estimated covariance matrix of measurement noise.
    #    trajectory - Vectorvalued function handle. Intended acceleration trajectory.
    #    t - float. The current time.
    #    Ts - float. The timestep at which the new data is generated by openni.
    # RETURN:
    #    xhat - New estimate at t = h*k
    #    Pnew - New covariance matrix at t = h*k

    # Updates zhistory vector
    zhist[0:-1] = zhist[1:]
    zhist[-1] = z
    
    # Updates the covariance with the most recent synchronized measurement
    if np.isnan(zhist[0][0]):
        xhat = x
        xpred = x
    else:
        xhat, P = discrete_KF_update(x, u, zhist[-1], A, B, C, P, Q, R)
    
        # Predics what the future state will look like based on current data
        xpred = xhat
        Ppred = P
        for ii in range(len(zhist)-1):
            zpred = zhist[ii+1]
            zpred[1] = trajectory(t + (1 + ii - len(zhist))*Ts) + np.dot(np.random.randn(1),R[1,1])[0]
            xpred, Ppred = discrete_KF_update(xpred, u, zhist[ii+1], A, B, C, Ppred, Q, R)

    return xhat, xpred, P, zhist
